generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL_TEST")
}

model institute {
  id             Int                     @id @default(autoincrement())
  name           String                  @unique
  urlIdentifier  String                  @unique
  description_en String?
  description_fr String?
  events         event[]
  grants         grant[]
  instituteAdmin instituteAdmin[]
  members        memberInstitute[]
  organizations  OrganizationInstitute[]
  products       productInstitute[]
  supervisions   supervision[]
}

model memberInstitute {
  memberId    Int
  instituteId Int
  institute   institute @relation(fields: [instituteId], references: [id])
  member      member    @relation(fields: [memberId], references: [id])

  @@id([memberId, instituteId])
}

model productInstitute {
  productId   Int
  instituteId Int
  institute   institute @relation(fields: [instituteId], references: [id])
  product     product   @relation(fields: [productId], references: [id])

  @@id([productId, instituteId])
}

model OrganizationInstitute {
  organizationId Int
  instituteId    Int
  institute      institute    @relation(fields: [instituteId], references: [id])
  organization   organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, instituteId])
}

model account {
  id             Int              @id(map: "PK_account") @default(autoincrement())
  login_email    String           @unique(map: "UK_login_email") @db.NVarChar(255)
  microsoft_id   String?          @db.NVarChar(255)
  first_name     String           @db.NVarChar(255)
  last_name      String           @db.NVarChar(255)
  last_login     DateTime?        @db.Date
  is_super_admin Boolean          @default(false, map: "DF_account_is_super_admin")
  instituteAdmin instituteAdmin[]
  member         member?
}

model current_promotion_strategy {
  member_id             Int
  promotion_strategy_id Int
  member                member             @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_current_promotion_strategy_member_id")
  promotion_strategy    promotion_strategy @relation(fields: [promotion_strategy_id], references: [id], onUpdate: NoAction, map: "FK_current_promotion_strategy_promotion_strategy_id")

  @@id([member_id, promotion_strategy_id], map: "PK_current_promotion_strategy")
}

model desired_partnership {
  id          Int        @id(map: "PK_desired_partnership")
  member_id   Int        @unique(map: "UK_desired_partnership_member_id")
  type_id     Int?
  scope_id    Int?
  description String?    @db.VarChar(Max)
  member      member     @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_desired_partnership_member_id")
  org_scope   org_scope? @relation(fields: [scope_id], references: [id], onUpdate: SetNull, map: "FK_desired_partnership_scope_id")
  org_type    org_type?  @relation(fields: [type_id], references: [id], onUpdate: SetNull, map: "FK_desired_partnership_type_id")
}

model desired_promotion_strategy {
  member_id             Int
  promotion_strategy_id Int
  member                member             @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_desired_promotion_strategy_member_id")
  promotion_strategy    promotion_strategy @relation(fields: [promotion_strategy_id], references: [id], onUpdate: NoAction, map: "FK_desired_promotion_strategy_promotion_strategy_id")

  @@id([member_id, promotion_strategy_id], map: "PK_desired_promotion_strategy")
}

model event {
  id                                                                 Int                      @id(map: "PK_event") @default(autoincrement())
  name_en                                                            String                   @db.NVarChar(2000)
  name_fr                                                            String                   @db.NVarChar(2000)
  start_date                                                         DateTime?                @db.Date
  end_date                                                           DateTime?                @db.Date
  event_type_id                                                      Int?
  topic_id                                                           Int?
  note                                                               String?                  @db.NVarChar(Max)
  instituteId                                                        Int
  institute                                                          institute                @relation(fields: [instituteId], references: [id])
  topic                                                              topic?                   @relation(fields: [topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_event_topic")
  event_type                                                         event_type?              @relation(fields: [event_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_event_type")
  event_grant_resulted                                               event_grant_resulted[]
  event_member_involved                                              event_member_involved[]
  event_next_event_event_next_event_event_idToevent                  event_next_event[]       @relation("event_next_event_event_idToevent")
  event_next_event_event_next_event_next_event_idToevent             event_next_event[]       @relation("event_next_event_next_event_idToevent")
  event_partner_involved                                             event_partner_involved[]
  event_previous_event_event_previous_event_event_idToevent          event_previous_event[]   @relation("event_previous_event_event_idToevent")
  event_previous_event_event_previous_event_previous_event_idToevent event_previous_event[]   @relation("event_previous_event_previous_event_idToevent")
  event_product_resulted                                             event_product_resulted[]
  event_topic                                                        event_topic[]
}

model event_event {
  previous_event_id Int
  next_event_id     Int

  @@id([previous_event_id, next_event_id], map: "PK_event_event")
}

model event_grant_resulted {
  event_id Int
  grant_id Int
  event    event @relation(fields: [event_id], references: [id], onDelete: Cascade, map: "FK_event_grant_resulted_event")
  grant    grant @relation(fields: [grant_id], references: [id], onDelete: Cascade, map: "FK_event_grant_resulted_grant")

  @@id([event_id, grant_id], map: "PK_event_grant_resulted")
}

model event_member_involved {
  event_id  Int
  member_id Int
  event     event  @relation(fields: [event_id], references: [id], onDelete: Cascade, map: "FK_event_member_involved_event")
  member    member @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_event_member_involved_member")

  @@id([event_id, member_id], map: "PK_event_member_involved")
}

model event_next_event {
  event_id                                    Int
  next_event_id                               Int
  event_event_next_event_event_idToevent      event @relation("event_next_event_event_idToevent", fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_event_next_event_event_id")
  event_event_next_event_next_event_idToevent event @relation("event_next_event_next_event_idToevent", fields: [next_event_id], references: [id], onUpdate: NoAction, map: "FK_event_next_event_next_event_id")

  @@id([event_id, next_event_id], map: "PK_event_next_event")
}

model event_partner_involved {
  event_id        Int
  organization_id Int
  event           event        @relation(fields: [event_id], references: [id], onDelete: Cascade, map: "FK_event_partner_involved_event")
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, map: "FK_event_partner_involved_org")

  @@id([event_id, organization_id], map: "PK_event_partner_involved")
}

model event_previous_event {
  event_id                                            Int
  previous_event_id                                   Int
  event_event_previous_event_event_idToevent          event @relation("event_previous_event_event_idToevent", fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_event_previous_event_event_id")
  event_event_previous_event_previous_event_idToevent event @relation("event_previous_event_previous_event_idToevent", fields: [previous_event_id], references: [id], onUpdate: NoAction, map: "FK_event_previous_event_previous_event_id")

  @@id([event_id, previous_event_id], map: "PK_event_previous_event")
}

model event_product_resulted {
  event_id   Int
  product_id Int
  event      event   @relation(fields: [event_id], references: [id], onDelete: Cascade, map: "FK_event_product_resulted_event")
  product    product @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "FK_event_product_resulted_product")

  @@id([event_id, product_id], map: "PK_event_product_resulted")
}

model event_topic {
  topic_id Int
  event_id Int
  event    event @relation(fields: [event_id], references: [id], onDelete: Cascade, map: "FK_event_topic_event_id")
  topic    topic @relation(fields: [topic_id], references: [id], onDelete: Cascade, map: "FK_event_topic_topic_id")

  @@id([topic_id, event_id], map: "PK_event_topic")
}

model event_type {
  id      Int     @id(map: "PK_event_type") @default(autoincrement())
  name_en String  @db.NVarChar(100)
  name_fr String  @db.NVarChar(100)
  event   event[]
}

model faculty {
  id          Int           @id(map: "PK_faculty") @default(autoincrement())
  name_en     String        @db.NVarChar(255)
  name_fr     String        @db.NVarChar(255)
  member      member[]
  supervision supervision[]
}

model grant {
  id                        Int                         @id(map: "PK_grant") @default(autoincrement())
  title                     String                      @db.NVarChar(2000)
  amount                    Float                       @db.Money
  throught_lri              Boolean                     @default(false, map: "DF_grant_throught_lri")
  status_id                 Int?
  submission_date           DateTime?                   @db.Date
  obtained_date             DateTime?                   @db.Date
  completed_date            DateTime?                   @db.Date
  source_id                 Int?
  all_investigator          String?                     @db.NVarChar(3000)
  topic_id                  Int?
  note                      String?                     @db.NVarChar(3000)
  instituteId               Int
  event_grant_resulted      event_grant_resulted[]
  source                    source?                     @relation(fields: [source_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_grant_source")
  status                    status?                     @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_grant_status")
  topic                     topic?                      @relation(fields: [topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_grant_topic")
  institute                 institute                   @relation(fields: [instituteId], references: [id], onUpdate: NoAction)
  grant_investigator_member grant_investigator_member[]
  grant_member_involved     grant_member_involved[]
}

model grant_investigator_member {
  grant_id  Int
  member_id Int
  grant     grant  @relation(fields: [grant_id], references: [id], onUpdate: NoAction, map: "FK_grant_investigator_member_grant")
  member    member @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_grant_investigator_member_member")

  @@id([grant_id, member_id], map: "PK_grant_investigator_member")
}

model grant_member_involved {
  grant_id  Int
  member_id Int
  grant     grant  @relation(fields: [grant_id], references: [id], onUpdate: NoAction, map: "FK_grant_member_involved_grant")
  member    member @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_grant_member_involved_member")

  @@id([grant_id, member_id], map: "PK_grant_member_involved")
}

model has_keyword {
  member_id  Int
  keyword_id Int
  keyword    keyword @relation(fields: [keyword_id], references: [id], onDelete: Cascade, map: "FK_has_keyword_keyword_id")
  member     member  @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_has_keyword_member_id")

  @@id([member_id, keyword_id], map: "PK_has_keyword")
  @@unique([member_id, keyword_id], map: "UK_has_keyword")
}

model insight {
  id               Int       @id(map: "PK_insight") @default(autoincrement())
  member_id        Int       @unique(map: "UK_insight_member_id")
  interview_date   DateTime? @db.Date
  about_member     String?   @db.NVarChar(Max)
  about_promotions String?   @db.NVarChar(Max)
  dream            String?   @db.NVarChar(Max)
  how_can_we_help  String?   @db.NVarChar(Max)
  admin_notes      String?   @db.NVarChar(Max)
  other_notes      String?   @db.NVarChar(Max)
  member           member    @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_insight_member_id")
}

model keyword {
  id          Int           @id(map: "PK_keyword") @default(autoincrement())
  name_en     String?       @db.NVarChar(200)
  name_fr     String?       @db.NVarChar(200)
  has_keyword has_keyword[]

  @@unique([name_en, name_fr], map: "UK_keyword_names")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model legacy {
  ID                        Int
  first_name                String?   @db.NVarChar(255)
  last_name                 String?   @db.NVarChar(255)
  business_name             String?   @db.NVarChar(255)
  date_joined               DateTime? @db.DateTime
  interview_date            DateTime? @db.DateTime
  date_in_active            DateTime? @db.DateTime
  email                     String?   @db.NVarChar(255)
  address                   String?   @db.NVarChar(255)
  city                      String?   @db.NVarChar(255)
  province                  String?   @db.NVarChar(255)
  country                   String?   @db.NVarChar(255)
  postal_code               String?   @db.NVarChar(255)
  business_phone            String?   @db.NVarChar(255)
  mobile_phone              String?   @db.NVarChar(255)
  interview_notes           String?   @db.NVarChar(Max)
  is_active                 Boolean
  category                  Int?
  keywords_EN               String?   @db.NVarChar(Max)
  keywords_FR               String?   @db.NVarChar(Max)
  problems_EN               String?   @db.NVarChar(Max)
  problems_FR               String?   @db.NVarChar(Max)
  dream                     String?   @db.NVarChar(Max)
  notes                     String?   @db.NVarChar(Max)
  how_can_we_help           String?   @db.NVarChar(Max)
  faculty                   Int?
  partnerships_1_notes      String?   @db.NVarChar(Max)
  partnerships_2_notes      String?   @db.NVarChar(Max)
  partnerships_3_notes      String?   @db.NVarChar(Max)
  partnerships_future_notes String?   @db.NVarChar(Max)
  future_promotion_notes    String?   @db.NVarChar(Max)
  indicators_frequency      Int?
  other_comments            String?   @db.NVarChar(Max)
  interviewer_notes         String?   @db.NVarChar(Max)

  @@ignore
}

model level {
  id          Int           @id(map: "PK_level") @default(autoincrement())
  name_fr     String        @db.NVarChar(50)
  name_en     String        @db.NVarChar(50)
  supervision supervision[]
}

model member {
  id                               Int                                @id(map: "PK_member") @default(autoincrement())
  account_id                       Int                                @unique(map: "UK_account_id")
  faculty_id                       Int?
  type_id                          Int?
  work_email                       String?                            @db.NVarChar(255)
  work_phone                       String?                            @db.NVarChar(50)
  about_me_fr                      String?                            @db.NVarChar(Max)
  about_me_en                      String?                            @db.NVarChar(Max)
  website_link                     String?                            @db.NVarChar(4000)
  twitter_link                     String?                            @db.NVarChar(4000)
  facebook_link                    String?                            @db.NVarChar(4000)
  linkedin_link                    String?                            @db.NVarChar(4000)
  tiktok_link                      String?                            @db.NVarChar(4000)
  cv_link                          String?                            @db.NVarChar(4000)
  address                          String?                            @db.NVarChar(255)
  city                             String?                            @db.NVarChar(255)
  province                         String?                            @db.NVarChar(255)
  country                          String?                            @db.NVarChar(255)
  postal_code                      String?                            @db.NVarChar(255)
  mobile_phone                     String?                            @db.NVarChar(50)
  date_joined                      DateTime?                          @db.Date
  is_active                        Boolean                            @default(true, map: "DF_member_is_active")
  last_active                      DateTime?                          @db.Date
  current_promotion_strategy       current_promotion_strategy[]
  desired_partnership              desired_partnership?
  desired_promotion_strategy       desired_promotion_strategy[]
  event_member_involved            event_member_involved[]
  grant_investigator_member        grant_investigator_member[]
  grant_member_involved            grant_member_involved[]
  has_keyword                      has_keyword[]
  insight                          insight?
  instituteAdmin                   instituteAdmin[]
  account                          account                            @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "FK_member_account_id")
  faculty                          faculty?                           @relation(fields: [faculty_id], references: [id], map: "FK_member_faculty_id")
  member_type                      member_type?                       @relation(fields: [type_id], references: [id], map: "FK_member_type_id")
  institutes                       memberInstitute[]
  partnership_member_org           partnership_member_org[]
  problem                          problem[]
  product_member_author            product_member_author[]
  supervision_co_supervisor        supervision_co_supervisor[]
  supervision_committee            supervision_committee[]
  supervision_principal_supervisor supervision_principal_supervisor[]
  supervision_trainee              supervision_trainee[]
}

model member_type {
  id      Int      @id(map: "PK_member_type") @default(autoincrement())
  name_en String   @db.NVarChar(255)
  name_fr String   @db.NVarChar(255)
  member  member[]
}

model org_scope {
  id                  Int                   @id(map: "PK_org_scope") @default(autoincrement())
  name_en             String                @db.NVarChar(255)
  name_fr             String                @db.NVarChar(255)
  desired_partnership desired_partnership[]
  organization        organization[]
}

model org_type {
  id                  Int                   @id(map: "PK_org_type") @default(autoincrement())
  name_en             String                @db.NVarChar(255)
  name_fr             String                @db.NVarChar(255)
  desired_partnership desired_partnership[]
  organization        organization[]
}

model organization {
  id                     Int                      @id(map: "PK_organization") @default(autoincrement())
  name_en                String                   @db.NVarChar(255)
  name_fr                String                   @db.NVarChar(255)
  scope_id               Int?
  type_id                Int?
  description            String?                  @db.NVarChar(4000)
  event_partner_involved event_partner_involved[]
  org_scope              org_scope?               @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_organization_scope_id")
  org_type               org_type?                @relation(fields: [type_id], references: [id], onUpdate: SetNull, map: "FK_organization_type_id")
  organizationInstitute  OrganizationInstitute[]
  partnership_member_org partnership_member_org[]
  product_partnership    product_partnership[]
}

model partnership_member_org {
  member_id       Int
  organization_id Int
  description     String?      @db.NVarChar(Max)
  member          member       @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_current_partnership_member_id")
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, map: "FK_current_partnership_organization_id")

  @@id([member_id, organization_id], map: "PK_current_partnership")
}

model problem {
  id        Int     @id(map: "PK_problem") @default(autoincrement())
  member_id Int
  name_en   String? @db.NVarChar(4000)
  name_fr   String? @db.NVarChar(4000)
  member    member  @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_problem_member_id")
}

model product {
  id                     Int                      @id(map: "PK_product") @default(autoincrement())
  title_en               String                   @db.NVarChar(500)
  title_fr               String                   @db.NVarChar(500)
  publish_date           DateTime?                @db.Date
  all_author             String?                  @db.NVarChar(3000)
  doi                    String?                  @db.NVarChar(100)
  on_going               Boolean                  @default(false, map: "DF_product_on_going")
  peer_reviewed          Boolean                  @default(false, map: "DF_product_peer_reviewed")
  product_type_id        Int?
  note                   String?                  @db.NVarChar(2000)
  event_product_resulted event_product_resulted[]
  product_type           product_type?            @relation(fields: [product_type_id], references: [id], map: "FK_product_product_type")
  product_member_author  product_member_author[]
  product_partnership    product_partnership[]
  product_target         product_target[]
  product_topic          product_topic[]
  institutes             productInstitute[]
}

model product_member_all_author {
  member_id  Int
  product_id Int

  @@id([member_id, product_id], map: "PK_product_member_all_author")
}

model product_member_author {
  member_id  Int
  product_id Int
  member     member  @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_product_member_author_member")
  product    product @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "FK_product_member_author_product")

  @@id([member_id, product_id], map: "PK_product_member_author")
}

model product_partnership {
  organization_id Int
  product_id      Int
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, map: "FK_product_partnership_ong")
  product         product      @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "FK_product_partnership_product")

  @@id([organization_id, product_id], map: "PK_product_partnership")
}

model product_target {
  target_id  Int
  product_id Int
  product    product @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "FK_product_target_product")
  target     target  @relation(fields: [target_id], references: [id], onDelete: Cascade, map: "FK_product_target_target_id")

  @@id([target_id, product_id], map: "PK_product_target")
}

model product_topic {
  topic_id   Int
  product_id Int
  product    product @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "FK_product_topic_product_id")
  topic      topic   @relation(fields: [topic_id], references: [id], onDelete: Cascade, map: "FK_product_topic_topic_id")

  @@id([topic_id, product_id], map: "PK_product_topic")
}

model product_type {
  id      Int       @id(map: "PK_product_type") @default(autoincrement())
  name_en String    @db.NVarChar(200)
  name_fr String    @db.NVarChar(200)
  product product[]
}

model promotion_strategy {
  id                         Int                          @id(map: "PK_promotion_strategy") @default(autoincrement())
  name_en                    String?                      @db.NVarChar(255)
  name_fr                    String?                      @db.NVarChar(255)
  current_promotion_strategy current_promotion_strategy[]
  desired_promotion_strategy desired_promotion_strategy[]
}

model source {
  id      Int     @id(map: "PK_source") @default(autoincrement())
  name_en String  @db.NVarChar(50)
  name_fr String  @db.NVarChar(50)
  grant   grant[]
}

model status {
  id      Int     @id(map: "PK_status") @default(autoincrement())
  name_en String  @db.NVarChar(50)
  name_fr String  @db.NVarChar(50)
  grant   grant[]
}

model supervision {
  id                               Int                                @id(map: "PK_supervision") @default(autoincrement())
  last_name                        String                             @db.NVarChar(100)
  first_name                       String                             @db.NVarChar(100)
  start_date                       DateTime?                          @db.Date
  end_date                         DateTime?                          @db.Date
  faculty_id                       Int?
  level_id                         Int?
  note                             String?                            @db.NVarChar(Max)
  instituteId                      Int
  faculty                          faculty?                           @relation(fields: [faculty_id], references: [id], map: "FK_supervision_faculty")
  level                            level?                             @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_supervision_level")
  institute                        institute                          @relation(fields: [instituteId], references: [id], onUpdate: NoAction)
  supervision_co_supervisor        supervision_co_supervisor[]
  supervision_committee            supervision_committee[]
  supervision_principal_supervisor supervision_principal_supervisor[]
  supervision_trainee              supervision_trainee[]
}

model supervision_co_supervisor {
  member_id      Int
  supervision_id Int
  member         member      @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_supervision_co_supervisor_member_id")
  supervision    supervision @relation(fields: [supervision_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_supervision_co_supervisor_supervision_id")

  @@id([member_id, supervision_id], map: "PK_supervision_co_supervisor")
}

model supervision_committee {
  member_id      Int
  supervision_id Int
  member         member      @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_supervision_committee_member_id")
  supervision    supervision @relation(fields: [supervision_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_supervision_committee_supervision_id")

  @@id([member_id, supervision_id], map: "PK_supervision_committee")
}

model supervision_principal_supervisor {
  member_id      Int
  supervision_id Int
  member         member      @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_supervision_principal_supervisor_member_id")
  supervision    supervision @relation(fields: [supervision_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_supervision_principal_supervisor_supervision_id")

  @@id([member_id, supervision_id], map: "PK_supervision_principal_supervisor")
}

model supervision_trainee {
  member_id      Int
  supervision_id Int
  member         member      @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_supervision_trainee_member_id")
  supervision    supervision @relation(fields: [supervision_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_supervision_trainee_supervision_id")

  @@id([member_id, supervision_id], map: "PK_supervision_trainee")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B6138BE0713") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model target {
  id             Int              @id(map: "PK_target_stakeholder") @default(autoincrement())
  name_fr        String           @db.NVarChar(300)
  name_en        String           @db.NVarChar(300)
  product_target product_target[]
}

model topic {
  id            Int             @id(map: "PK_topic") @default(autoincrement())
  name_fr       String          @db.NVarChar(300)
  name_en       String          @db.NVarChar(300)
  event         event[]
  event_topic   event_topic[]
  grant         grant[]
  product_topic product_topic[]
}

model instituteAdmin {
  memberId    Int
  instituteId Int
  accountId   Int
  account     account   @relation(fields: [accountId], references: [id], onUpdate: NoAction, map: "FK_instituteAdmin_accountId")
  institute   institute @relation(fields: [instituteId], references: [id], onUpdate: NoAction, map: "FK_instituteAdmin_instituteId")
  member      member    @relation(fields: [memberId], references: [id], onUpdate: NoAction, map: "FK_instituteAdmin_memberId")

  @@id([accountId, instituteId], map: "PK_instituteAdmin")
}
